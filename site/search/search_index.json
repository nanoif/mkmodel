{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aflsd fadsfs f dsf sa fs af","title":"Home"},{"location":"code/","text":"Normal Code Blocks \ud83c\udfb6 1 2 3 4 5 6 7 8 9 10 11 12 13 int RandomizedSelect ( int A [], int index , int left , int right ) { if ( left == right ) { return A [ left ]; } int i = RandomizedPartition ( A , left , right ); if ( i + 1 == index ) { return A [ i ]; } else if ( i + 1 < index ) { return RandomizedSelect ( A , index , i + 1 , right ); } else { return RandomizedSelect ( A , index , left , i - 1 ); } } Tabbed Code Blocks \ud83c\udfb6 C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Codes In Admonition \ud83c\udfb6 Hello World 1 2 3 int main () { printf ( \"Hello World!\" ); } RBTree Delete 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 void Delete ( RBTree * tree , Node * z ) { Node * y = z ; Node * x ; Color yOrgColor = y -> color ; if ( z -> left == tree -> nil ) { x = z -> right ; Transplant ( tree , z , z -> right ); } else if ( z -> right == tree -> nil ) { x = z -> left ; Transplant ( tree , z , z -> left ); } else { y = Minimum ( tree , z -> right ); yOrgColor = y -> color ; x = y -> right ; if ( y -> parent == z ) { x -> parent = y ; // if z->right links to y directly and y->right links // to nil (i.e. x = nil), let nil->parent link to y } else { Transplant ( tree , y , y -> right ); y -> right = z -> right ; z -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; z -> left -> parent = y ; y -> color = z -> color ; // shift color } if ( yOrgColor == BLACK ) { DeleteFixup ( tree , x ); } } Tabbed Code In Admonition \ud83c\udfb6 Codes C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Codes C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"code"},{"location":"code/#normal-code-blocks","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 int RandomizedSelect ( int A [], int index , int left , int right ) { if ( left == right ) { return A [ left ]; } int i = RandomizedPartition ( A , left , right ); if ( i + 1 == index ) { return A [ i ]; } else if ( i + 1 < index ) { return RandomizedSelect ( A , index , i + 1 , right ); } else { return RandomizedSelect ( A , index , left , i - 1 ); } }","title":"Normal Code Blocks"},{"location":"code/#tabbed-code-blocks","text":"C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Tabbed Code Blocks"},{"location":"code/#codes-in-admonition","text":"Hello World 1 2 3 int main () { printf ( \"Hello World!\" ); } RBTree Delete 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 void Delete ( RBTree * tree , Node * z ) { Node * y = z ; Node * x ; Color yOrgColor = y -> color ; if ( z -> left == tree -> nil ) { x = z -> right ; Transplant ( tree , z , z -> right ); } else if ( z -> right == tree -> nil ) { x = z -> left ; Transplant ( tree , z , z -> left ); } else { y = Minimum ( tree , z -> right ); yOrgColor = y -> color ; x = y -> right ; if ( y -> parent == z ) { x -> parent = y ; // if z->right links to y directly and y->right links // to nil (i.e. x = nil), let nil->parent link to y } else { Transplant ( tree , y , y -> right ); y -> right = z -> right ; z -> right -> parent = y ; } Transplant ( tree , z , y ); y -> left = z -> left ; z -> left -> parent = y ; y -> color = z -> color ; // shift color } if ( yOrgColor == BLACK ) { DeleteFixup ( tree , x ); } }","title":"Codes In Admonition"},{"location":"code/#tabbed-code-in-admonition","text":"Codes C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Codes C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Tabbed Code In Admonition"},{"location":"general/","text":"List \ud83c\udfb6 \u4e0a\u9762\u7684\u4f8b\u5b50\u5047\u8bbe\u6570\u636e\u96c6\u7684\u57fa\u6570\u4e3a 1\u3002\u5f53\u6570\u636e\u96c6\u5f88\u5927\u65f6: \u6279\u91cf\u68af\u5ea6\u4e0b\u964d (BGD):\u2003\u7406\u60f3\u7684\u68af\u5ea6\u4e0b\u964d\u65b9\u5f0f\uff0c\u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u8f93\u5165\u8ba1\u7b97\u8bef\u5dee\uff0c\u5c06\u6240\u6709\u8bef\u5dee\u7d2f\u52a0\u53d6\u5e73\u5747\u4f5c\u4e3a\u6700\u7ec8\u7684\u4ee3\u4ef7\u51fd\u6570\uff0c\u5e76\u4ee5\u6b64\u66f4\u65b0\u53c2\u6570 \u5168\u6570\u636e\u96c6\u8ba1\u7b97\u4ee3\u4ef7\u51fd\u6570\uff0c\u66f4\u597d\u5730\u4ee3\u8868\u603b\u4f53\uff0c\u7b97\u51fa\u6781\u5c0f\u503c\u540e\uff0c\u4fdd\u8bc1\u68af\u5ea6\u4e3a 00 \u5bf9\u6bcf\u4e2a\u53c2\u6570\u6c42\u504f\u5bfc\u9700\u8981\u904d\u5386\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u5f88\u6162 \u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u968f\u673a\u68af\u5ea6\u4e0b\u964d (stochastic, SGD):\u2003\u6bcf\u8ba1\u7b97\u4e00\u4e2a\u6837\u672c\u7684\u524d\u5411\u4f20\u64ad\u540e\uff0c\u5c31\u8ba1\u7b97\u5b83\u7684\u4ee3\u4ef7\uff0c\u5e76\u4ee5\u4e4b\u4e3a\u76ee\u6807\u51fd\u6570\u66f4\u65b0\u53c2\u6570 \u901f\u5ea6\u5feb\uff0c\u968f\u673a\u6027\u6709\u5229\u4e8e\u8df3\u51fa\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u51c6\u786e\u5ea6\u4e0b\u964d\uff0c\u89e3\u7a7a\u95f4\u641c\u7d22\u6bd4\u8f83\u76f2\u76ee\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u6700\u4f18\u65b9\u5411 \u82e5\u6536\u655b\uff0closs \u5448\u73b0\u4e0a\u4e0b\u9707\u8361\u3001\u4f46\u603b\u4f53\u4e0a\u4e0b\u964d\u7684\u8d8b\u52bf \u5c0f\u6279\u91cf\u68af\u5ea6\u4e0b\u964d (Mini-BGD):\u2003SGD \u548c BGD \u7684\u6298\u4e2d\uff0c\u628a\u6570\u636e\u96c6\u968f\u673a\u5206\u6210\u82e5\u5e72 mini batch\uff0c\u6bcf\u6b21\u8fed\u4ee3\u4f7f\u7528 batch size \u4e2a\u6837\u672c\u8fdb\u884c\u66f4\u65b0 \u5408\u7406\u5730\u589e\u5927 batch \u53ef\u5145\u5206\u5229\u7528 GPU\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u51cf\u5c0f loss \u7684\u9707\u8361\uff0c\u5c0f batch \u5f15\u5165\u968f\u673a\u6027\uff0c\u5c3d\u7ba1\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u4f46\u540c\u6837\u53ef\u80fd\u9020\u6210\u6536\u655b\u901f\u5ea6\u6162\u751a\u81f3\u4e0d\u6536\u655b \u5408\u7406\u5730\u589e\u5927 batch \u53ef\u5145\u5206\u5229\u7528 GPU\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u51cf\u5c0f loss \u7684\u9707\u8361\uff0c\u5c0f batch \u5f15\u5165\u968f\u673a\u6027\uff0c\u5c3d\u7ba1\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u4f46\u540c\u6837\u53ef\u80fd\u9020\u6210\u6536\u655b\u901f\u5ea6\u6162\u751a\u81f3\u4e0d\u6536\u655b \u901f\u5ea6\u5feb\uff0c\u968f\u673a\u6027\u6709\u5229\u4e8e\u8df3\u51fa\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u51c6\u786e\u5ea6\u4e0b\u964d\uff0c\u89e3\u7a7a\u95f4\u641c\u7d22\u6bd4\u8f83\u76f2\u76ee\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u6700\u4f18\u65b9\u5411 \u82e5\u6536\u655b\uff0closs \u5448\u73b0\u4e0a\u4e0b\u9707\u8361\u3001\u4f46\u603b\u4f53\u4e0a\u4e0b\u964d\u7684\u8d8b\u52bf Math Formula \ud83c\udfb6 $$ L(\\bm{w}) $$ E: $1 $ plus $1$ $=$ $2$ $\\displaystyle L() $ $\\displaystyle L(\\bm{w},b,\\bm{\\xi},\\bm{\\alpha},\\bm{\\mu})=\\frac{1}{2}||\\bm{w}||^2+C\\sum_{i=1}^n \\xi_i-\\sum_{i=1}^n \\alpha_i(y_i(\\bm{w^\\mathrm{T}}\\bm{x_i}+b)-1+\\xi_i)-\\sum_{i=1}^n\\mu_i\\xi_i \\\\ \\Leftrightarrow $ $\\displaystyle \\left(\\begin{array}{c} p_{1} \\\\ p_{2} \\\\ \\vdots \\\\ p_{R} \\end{array}\\right)\\left(\\begin{array}{cccc} a_{1} & a_{2} & \\cdots & a_{M} \\end{array}\\right)=\\left(\\begin{array}{cccc} p_{1} a_{1} & p_{1} a_{2} & \\cdots & p_{1} a_{M} \\\\ p_{2} a_{1} & p_{2} a_{2} & \\cdots & p_{2} a_{M} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ p_{R} a_{1} & p_{R} a_{2} & \\cdots & p_{R} a_{M} \\end{array}\\right) $ Permalink \ud83c\udfb6 Fonts \ud83c\udfb6 en: cycn-eng:\u2003 If winter comes , can spring be far behind ? monaco:\u2003 If winter comes , can spring be far behind ? consolas:\u2003 If winter comes , can spring be far behind ? m:\u2003 If winter comes , can spring be far behind ? msf:\u2003 If winter comes , can spring be far behind ? Table: ToDo \ud83c\udfb6 Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource Admonitions \ud83c\udfb6 hint \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 hint \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 caution \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 caution de \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002","title":"Home"},{"location":"general/#list","text":"\u4e0a\u9762\u7684\u4f8b\u5b50\u5047\u8bbe\u6570\u636e\u96c6\u7684\u57fa\u6570\u4e3a 1\u3002\u5f53\u6570\u636e\u96c6\u5f88\u5927\u65f6: \u6279\u91cf\u68af\u5ea6\u4e0b\u964d (BGD):\u2003\u7406\u60f3\u7684\u68af\u5ea6\u4e0b\u964d\u65b9\u5f0f\uff0c\u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u8f93\u5165\u8ba1\u7b97\u8bef\u5dee\uff0c\u5c06\u6240\u6709\u8bef\u5dee\u7d2f\u52a0\u53d6\u5e73\u5747\u4f5c\u4e3a\u6700\u7ec8\u7684\u4ee3\u4ef7\u51fd\u6570\uff0c\u5e76\u4ee5\u6b64\u66f4\u65b0\u53c2\u6570 \u5168\u6570\u636e\u96c6\u8ba1\u7b97\u4ee3\u4ef7\u51fd\u6570\uff0c\u66f4\u597d\u5730\u4ee3\u8868\u603b\u4f53\uff0c\u7b97\u51fa\u6781\u5c0f\u503c\u540e\uff0c\u4fdd\u8bc1\u68af\u5ea6\u4e3a 00 \u5bf9\u6bcf\u4e2a\u53c2\u6570\u6c42\u504f\u5bfc\u9700\u8981\u904d\u5386\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u5f88\u6162 \u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u968f\u673a\u68af\u5ea6\u4e0b\u964d (stochastic, SGD):\u2003\u6bcf\u8ba1\u7b97\u4e00\u4e2a\u6837\u672c\u7684\u524d\u5411\u4f20\u64ad\u540e\uff0c\u5c31\u8ba1\u7b97\u5b83\u7684\u4ee3\u4ef7\uff0c\u5e76\u4ee5\u4e4b\u4e3a\u76ee\u6807\u51fd\u6570\u66f4\u65b0\u53c2\u6570 \u901f\u5ea6\u5feb\uff0c\u968f\u673a\u6027\u6709\u5229\u4e8e\u8df3\u51fa\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u51c6\u786e\u5ea6\u4e0b\u964d\uff0c\u89e3\u7a7a\u95f4\u641c\u7d22\u6bd4\u8f83\u76f2\u76ee\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u6700\u4f18\u65b9\u5411 \u82e5\u6536\u655b\uff0closs \u5448\u73b0\u4e0a\u4e0b\u9707\u8361\u3001\u4f46\u603b\u4f53\u4e0a\u4e0b\u964d\u7684\u8d8b\u52bf \u5c0f\u6279\u91cf\u68af\u5ea6\u4e0b\u964d (Mini-BGD):\u2003SGD \u548c BGD \u7684\u6298\u4e2d\uff0c\u628a\u6570\u636e\u96c6\u968f\u673a\u5206\u6210\u82e5\u5e72 mini batch\uff0c\u6bcf\u6b21\u8fed\u4ee3\u4f7f\u7528 batch size \u4e2a\u6837\u672c\u8fdb\u884c\u66f4\u65b0 \u5408\u7406\u5730\u589e\u5927 batch \u53ef\u5145\u5206\u5229\u7528 GPU\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u51cf\u5c0f loss \u7684\u9707\u8361\uff0c\u5c0f batch \u5f15\u5165\u968f\u673a\u6027\uff0c\u5c3d\u7ba1\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u4f46\u540c\u6837\u53ef\u80fd\u9020\u6210\u6536\u655b\u901f\u5ea6\u6162\u751a\u81f3\u4e0d\u6536\u655b \u5408\u7406\u5730\u589e\u5927 batch \u53ef\u5145\u5206\u5229\u7528 GPU\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u51cf\u5c0f loss \u7684\u9707\u8361\uff0c\u5c0f batch \u5f15\u5165\u968f\u673a\u6027\uff0c\u5c3d\u7ba1\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u4f46\u540c\u6837\u53ef\u80fd\u9020\u6210\u6536\u655b\u901f\u5ea6\u6162\u751a\u81f3\u4e0d\u6536\u655b \u901f\u5ea6\u5feb\uff0c\u968f\u673a\u6027\u6709\u5229\u4e8e\u8df3\u51fa\u5c40\u90e8\u6781\u5c0f\u503c\u70b9 \u51c6\u786e\u5ea6\u4e0b\u964d\uff0c\u89e3\u7a7a\u95f4\u641c\u7d22\u6bd4\u8f83\u76f2\u76ee\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u6700\u4f18\u65b9\u5411 \u82e5\u6536\u655b\uff0closs \u5448\u73b0\u4e0a\u4e0b\u9707\u8361\u3001\u4f46\u603b\u4f53\u4e0a\u4e0b\u964d\u7684\u8d8b\u52bf","title":"List"},{"location":"general/#math-formula","text":"$$ L(\\bm{w}) $$ E: $1 $ plus $1$ $=$ $2$ $\\displaystyle L() $ $\\displaystyle L(\\bm{w},b,\\bm{\\xi},\\bm{\\alpha},\\bm{\\mu})=\\frac{1}{2}||\\bm{w}||^2+C\\sum_{i=1}^n \\xi_i-\\sum_{i=1}^n \\alpha_i(y_i(\\bm{w^\\mathrm{T}}\\bm{x_i}+b)-1+\\xi_i)-\\sum_{i=1}^n\\mu_i\\xi_i \\\\ \\Leftrightarrow $ $\\displaystyle \\left(\\begin{array}{c} p_{1} \\\\ p_{2} \\\\ \\vdots \\\\ p_{R} \\end{array}\\right)\\left(\\begin{array}{cccc} a_{1} & a_{2} & \\cdots & a_{M} \\end{array}\\right)=\\left(\\begin{array}{cccc} p_{1} a_{1} & p_{1} a_{2} & \\cdots & p_{1} a_{M} \\\\ p_{2} a_{1} & p_{2} a_{2} & \\cdots & p_{2} a_{M} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ p_{R} a_{1} & p_{R} a_{2} & \\cdots & p_{R} a_{M} \\end{array}\\right) $","title":"Math Formula"},{"location":"general/#permalink","text":"","title":"Permalink"},{"location":"general/#fonts","text":"en: cycn-eng:\u2003 If winter comes , can spring be far behind ? monaco:\u2003 If winter comes , can spring be far behind ? consolas:\u2003 If winter comes , can spring be far behind ? m:\u2003 If winter comes , can spring be far behind ? msf:\u2003 If winter comes , can spring be far behind ?","title":"Fonts"},{"location":"general/#table-todo","text":"Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource","title":"Table: ToDo"},{"location":"general/#admonitions","text":"hint \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 hint \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 caution \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002 caution de \u70b9\u5bf9\u70b9\u94fe\u8def (point-to-point link) \u7531\u94fe\u8def\u53ca\u5176\u4e24\u7aef\u5355\u4e00\u7684\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7ec4\u6210\u3002\u5f88\u591a\u94fe\u8def\u5c42\u534f\u8bae\u5982 PPP\u3001HDLC \u57fa\u4e8e\u6b64\u800c\u8bbe\u8ba1\u3002 \u5e7f\u64ad\u94fe\u8def (broadcast link) \u80fd\u591f\u8ba9\u591a\u4e2a\u53d1\u9001\u548c\u63a5\u6536\u8282\u70b9\u63a5\u5165\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u94fe\u8def\u4e0a\u3002\u5e7f\u64ad\u7684\u542b\u4e49\u662f\u5f53\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f20\u8f93\u4e00\u4e2a\u5e27\u65f6\uff0c\u4fe1\u9053\u5e7f\u64ad\u8be5\u5e27\uff0c\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\u90fd\u6536\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf\u5c40\u57df\u7f51\u5747\u57fa\u4e8e\u6b64\u5b9e\u73b0\u3002","title":"Admonitions"}]}